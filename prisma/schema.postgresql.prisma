// Production Prisma schema for PostgreSQL deployment
// This file should be used when deploying to Vercel with PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id
  username               String          @unique
  avatar                 String?
  cover                  String?
  name                   String?
  surname                String?
  description            String?
  city                   String?
  school                 String?
  work                   String?
  website                String?
  createdAt              DateTime        @default(now())
  posts                  Post[]
  likes                  Like[]
  comments               Comment[]
  follower               Follower[]      @relation("UserFollows")
  following              Follower[]      @relation("UserFollowing")
  followRequestSent      FollowRequest[] @relation("FollowRequestSender")
  followRequestReceived  FollowRequest[] @relation("FollowRequestReceiver")
  block                  Block[]         @relation("BlockSender")
  blockedBy              Block[]         @relation("BlockReceiver")
  story                  Story[]
  sentMessages           Message[]       @relation("MessageSender")
  receivedMessages       Message[]       @relation("MessageReceiver")
  conversations          ConversationParticipant[]
  notifications          Notification[]  @relation("NotificationReceiver")
  sentNotifications      Notification[]  @relation("NotificationSender")

  @@map("users")
}

model Post {
  id          String    @id @default(cuid())
  desc        String
  img         String?
  video       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     Like[]
  replies   Comment[] @relation("CommentReplies")
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Follower {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@map("followers")
}

model FollowRequest {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String
  sender     User     @relation("FollowRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("FollowRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("follow_requests")
}

model Block {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  blockerId String
  blockedId String
  blocker   User     @relation("BlockSender", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User     @relation("BlockReceiver", fields: [blockedId], references: [id], onDelete: Cascade)

  @@map("blocks")
}

model Story {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stories")
}

model Conversation {
  id           String                    @id @default(cuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now())
  senderId       String
  receiverId     String
  conversationId String
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User         @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id         String            @id @default(cuid())
  type       NotificationType
  content    String
  createdAt  DateTime          @default(now())
  read       Boolean           @default(false)
  senderId   String?
  receiverId String
  postId     String?
  sender     User?             @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User              @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  FOLLOW_REQUEST
  MESSAGE
}
