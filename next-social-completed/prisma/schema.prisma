// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                     String          @id
  username               String          @unique
  avatar                 String?
  cover                  String?
  name                   String?
  surname                String?
  description            String?
  city                   String?
  school                 String?
  work                   String?
  website                String?
  createdAt              DateTime        @default(now())
  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  followers              Follower[]      @relation("UserFollowers")
  followings             Follower[]      @relation("UserFollowings")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blocks                 Block[]         @relation("BlocksSent")
  blockedBy              Block[]         @relation("BlocksReceived")
  stories                Story[]
  storyViews             StoryView[]
  messagesSent           Message[]       @relation("MessagesSent")
  messagesReceived       Message[]       @relation("MessagesReceived")
  conversationsInitiated Conversation[] @relation("ConversationsInitiated")
  conversationsReceived  Conversation[] @relation("ConversationsReceived")
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  likes     Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String?
  video     String?
  text      String?
  mediaType String   @default("image") // "image", "video", "text", "mixed"
  privacy   String   @default("public") // "public", "friends", "custom"
  customViewers String? // JSON string of user IDs for custom privacy
  backgroundColor String? // For text-only stories
  textColor String? // For text-only stories
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  views     StoryView[]
}

model StoryView {
  id      Int    @id @default(autoincrement())
  viewedAt DateTime @default(now())
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId Int
  viewer  User   @relation(fields: [viewerId], references: [id], onDelete: Cascade)
  viewerId String
  
  @@unique([storyId, viewerId])
}

model Conversation {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user1       User      @relation("ConversationsInitiated", fields: [user1Id], references: [id], onDelete: Cascade)
  user1Id     String
  user2       User      @relation("ConversationsReceived", fields: [user2Id], references: [id], onDelete: Cascade)
  user2Id     String
  messages    Message[]
  
  @@unique([user1Id, user2Id])
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  createdAt      DateTime     @default(now())
  isRead         Boolean      @default(false)
  sender         User         @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  receiver       User         @relation("MessagesReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId     String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
}
